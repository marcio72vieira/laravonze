
000 -   Para baixar o projeto via GIT:
        a) Clonar o projeto: / OU baixar o arquivo .zip
            marcio@marcio72:~/projetosdocker/laravonze$ git clone https://github.com/marcio72vieira/laravonze.git
        b) Criar o arquivo ".env" a partir do arquivo ".env.example" conforme os passos abaixo:
            1 - Entrar a pasta do projeto
                cd projetosdocker/laravonze
                cp ./.env.example .env
            2 - Fazer as alterações necessárias conforme descrito abaixo:
                1) APP_TIMEZONE=America/Sao_Paulo
                2) APP_LOCALE=pt-BR
                3) APP_PORT=8080
                4) FORWARD_DB_PORT=3307
                5) DB_DATABASE=laravonze
        c) Atualizar o projeto com as dependências necessárias
            marcio@marcio72:~/projetosdocker/laravonze$ composer update
        d) Levantar os containeres
            ./vendor/bin/sail up -d
        e) Gerar a chave da aplicação
            marcio@vaio:~/projetosdocker/laravonze$  ./vendor/bin/sail artisan key:generate
        f) Depois de ter criado e modificado o arquivo .env aplicar o comando abaixo:
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail composer dump-autoload
        g) Executar as migrations:
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
        h) Executar a aplicação
            http://localhost:8080




001 -   Para criar o projeto:
        a) Dentro da pasta de projetosdocker digitar:
            curl -s https://laravel.build/laravonze | bash
        b) No arquivo docker-compose.yml alterar conforme código abaixo:
            b.1) - '${APP_PORT:-8080}:80'
            b.2) - '${FORWARD_DB_PORT:-3307}:3306'
            b.3) - '${FORWARD_REDIS_PORT:-6380}:6379'
        c) Acrescentar no arquivo .env as variáveis, conforme abaixo:
            c.1) APP_TIMEZONE=America/Sao_Paulo
            c.2) APP_LOCALE=pt-BR
            c.3) APP_PORT=8080
            c.4) FORWARD_DB_PORT=3307
            c.5) DB_DATABASE=laravonze
        d) Na pasta do projeto digitar:
            d.1) ./vendor/bin/sail up -d
            d.2) ./vendor/bin/sail artisan migrate


002 -   Para executar o projeto:
        Com os "containers" levantados (./vendor/bin/sail up -d), na barra de navegação, digitar:
        http://localhost:8080

003 -   Para gerar uma chave para aplicação quando necessário. Com os "containers" levantados, dentro da pasta do projeto:
        marcio@vaio:~/projetosdocker/laravonze$  ./vendor/bin/sail artisan key:generate

004 -   Para instalar ou atualizar as dependências da aplicação:
        marcio@vaio:~/projetosdocker/laravonze$  ./vendor/bin/sail composer install OU composer update

005 -   Para ver as versões do PHP, MySQL, Composer, NPM e Node instaladas, digitar:
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail php -v
        marcio@vaio:~/projetosdocker/laravonze$ mysql --version
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail composer
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail npm -v
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail node -v

006- -  Criando seed
        a) ./vendor/bin/sail artisan make:seeder CourseSeeder
        b) Modificar o método run, da seeder criada na linha acima:
                public function run(): void
                {
                        // Só cria um curso, se não existir um curso com o nome já cadastrado
                        if(!Course::where('name','Curso de Laravel - T1')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T1'
                        ]);
                        }

                        if(!Course::where('name','Curso de Laravel - T2')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T2'
                        ]);
                        }
                }
        c) Acrescentar no arquivo: database/seeders/DatabaseSeeder.php, o trecho de código conforme abaixo:
                $this->call([
                        CourseSeeder::class,
                ]);
        d) Execute a seed com o comando abaixo:
                ./vendor/bin/sail artisan db:seed
        e) Executando uma seed específica:
                ./vendor/bin/sail artisan db:seed --class=UserSeeder


007 -   Adicionando uma coluna a uma tabela existente
        a) Digitar o comando relacinado à cricção da coluna(s) na tabela desejada
           marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:migration alter_courses_add_price_table
        b) Digitar no corpo do método criado pelo comando acima o trecho de código a seguir:
                public function up(): void
                {
                        Schema::table('courses', function(Blueprint $table){
                                $table->float('price')->after('name')->default(0);
                        });
                }

                /**
                * Reverse the migrations.
                */
                public function down(): void
                {
                        Schema::table('courses', function(Blueprint $table){
                                $table->dropColumn('price');
                        });
                }
        c) Executar o comando migrate
           marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
        d) Alterar a seed referente á coluna com o novo campo Adicionando
                // Só cria um curso, se não existir um curso com o nome já cadastrado
                if(!Course::where('name','Curso de Laravel - T1')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T1',
                                'price' => 197.43
                        ]);
                }

                if(!Course::where('name','Curso de Laravel - T2')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T2',
                                'price' => 247.43
                        ]);
                }

008 -   Criando componente ANÔNIMO, ou seja, apenas com blade(view) sem uma class(controller) .
        a) Criar o componente confome comando abaixo: Será criado o arquivo: resources/views/components/alert.blade.php
                ./vendor/bin/sail artisan make:component alerts --view

        b) Copiar para o conteúdo do arquivo alert.blade.php os trechos de código abaixo, referente ás mensagem de alerts desejadas, conforme abaixo:
                {{-- Mensagens de sucesso --}}
                @if (session('success'))
                        <p style="background-color: green; color: white">
                                {{ session('success') }}
                        </p>
                @endif

                {{-- Mensagens de error --}}
                @if (session('error'))
                        <p style="background-color: red; color: white">
                                {{ session('error') }}
                        </p>
                @endif


                {{-- Mensagens de errors de validação --}}
                @if ($errors->any())
                        <span style="background-color: red; color: white">
                                @foreach ($errors->all() as $error)
                                {{ $error }}<br>
                                @endforeach
                        </span>
                @endif
        c) Acrescentar nas view index.blade; create.blade e edit.blade a tag abaixo:
                <x-alert>

009 -   Bengin, Commit e RollBack Transaction
        1 - Importar a classe correspondente
            use Illuminate\Support\Facades\DB;

        2 - Estrutura básica:

            Validar dados
            // Iniciar transação antes do try/catch
            DB::beginTransaction()
            try{
                    // Tentar SALVAR / ATUALIZAR / DELETAR os dados
                    // Em caso de sucesso
                    DB::commit()
                    ... mais alguma coisa (redirect etc...)
            } catch(Exception $e) {
                    // Em caso de falha na tentativa de SALVAR / ATUALIZAR / DELETAR os dados
                    DB::rollBacl()
                    ... mais alguma coisa (redirect etc...)
            }

010 -   Trabalhando com Logs
        Arquivo de configuração: /home/marcio/projetosdocker/laravonze/config/logging.php
        Especificação:
                single (único arquivo);
                daily (um arquivo para cada dia. Mais recomendado)
                info(fluxo normal do sistema)
        Alterar preferencialmente no arquivo .env
                LOG_CHANNEL=stack
                LOG_STACK=daily
                LOG_DAILY_DAYS=15
                LOG_DEPRECATIONS_CHANNEL=null
                LOG_LEVEL=debug
        Como o arquivo .env foi alterado, digitar o comando:
                marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail composer dump-autoload

011 -   Auditoria: Site oficial:
        a) Site oficial da dependência:
            https://laravel-auditing.com/guide/installation.html
        b) Instalar o pacote de auditoria do Laravel
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail composer require owen-it/laravel-auditing
        c) Publicar o pacote
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan vendor:publish --provider "OwenIt\Auditing\AuditingServiceProvider" --tag="config"
        d) Publicar as migrations da base de dados
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan vendor:publish --provider "OwenIt\Auditing\AuditingServiceProvider" --tag="migrations"
        e) Execuar a migration criada pela publicação da base de dados anterior
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
        f) Acrescentar as Models Course e Classe, o trecho de código conforme abaixo:
            ...
            use OwenIt\Auditing\Contracts\Auditable;

            class Course extends Model implements Auditable
            {
                use \OwenIt\Auditing\Auditable;
                use HasFactory;
            ...
        g) Limpar o cache de informações caso seja necessário
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan config:clear
        h) Depois de baixar o projeto via git para atualização Casa/Trabalho Trabalho/Casa, digitar:
            1) marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail composer update
            2) marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
            3) marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan config:clear





012 -   Integrando o Bootstrap no projeto
        1 - Abrir o site em: https://getbootstrap.com/
        2 - Na parte da documentação "Docs", acessar:
            VIA CDN
            a) Introduction > Quick start > 2. Include Bootstrap’s CSS and JS. > Copiar os links abaixo e colar no arquivo: resources/views/layouts/admin.blade.php, conforme abaixo, via cdn
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <meta http-equiv="X-UA-Compatible" content="ie=edge">
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
                    <title>Celke</title>
                </head>
                <body>

                    @yield('content')
                    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

                </body>
                </html>
        3 - Na parte de documentação "Docs", acessar:
            VIA DOWNLOAD
            a) Compiled CSS and JS > Download (baixar o arquivo) > Descompactar os arquivos
            b) Criar a pasta public/css e copiar os arquivos abaixo, para esta pasta:
                bootstrap.min.css
                bootstrap.min.css.map
            b) Criar a pasta public/js e copiar os arquivos abaixo, para esta pasta:
                bootstrap.bundle.min.js
                bootstrap.bundle.min.js.map
            d) Alterar o arquivo: resources/views/layouts/admin.blade.php,, conforme abaixo:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <meta http-equiv="X-UA-Compatible" content="ie=edge">
                    <link href="{{ asset('css/bootstrap.min.css') }}" rel="stylesheet">

                    <title>Celke</title>
                </head>
                <body>

                    @yield('content')

                    <script src="{{ asset('js/bootstrap.bundle.min.js') }}"></script>


                </body>
                </html>

013 -   Integrando SB admin e Font Awesome na aplicação
        a) Baixar o SBAdmin do site: https://startbootstrap.com/template/sb-admin
        b) Baixar o FontAwesome do site: https://fontawesome.com/download (versão 6 - free for web)
        c) Copiar para a pasta public/css/ os arquivos e renomeá-los se achar necessário styles_sbadmin.css
           styles.css (do sbadmin) e all.min.css (do fontawesome)
        d) Copiar para a pasta public/js os arquivos e renomeá-los se achar necessário scripts_sbadmin.js
           scripts.js(do sbadmin) e all.min.js (do fontawesome)
        e) Inlcuílos seus caminhos no arquivo: resources/views/layouts/admin.blade.php
        f) Para evitar o erro de carregamento do favicon no console, Copiar a pasta webfonts para a pasta /home/marcio/projetosdocker/laravonze/public.

014 -   Implementando a paginação
        a) Alterar o método boot na classe AppServiceProvider(/app/Providers/AppServiceProvider.php) como abaixo:

           use Illuminate\Pagination\Paginator;

           public function boot(): void
           {
                Paginator::useBootstrapFive();
           }

        b) Alterar o método index, dos controlleres, conforme abaixo:
           public function index()
           {
                $courses = Course::orderBy('name', 'ASC')->paginate(10);

                return view('courses.index', ['courses' => $courses]);
           }
        c) Inserir ma view correspondene(index.blade.php) o trecho de código abaixo:

           {{ $courses->links() }}

015 -   Como traduzir para o PORTUGUÊS
        a) Acessar site de tradução de linguagem em:
           https://github.com/lucascudo/laravel-pt-BR-localization
        b) Efeturar a sequência de comandos abaixo como descrito abaixo (sequẽncia encontrada na parte de baixo da página acessada):
           1 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan lang:publish
           2 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail composer require lucascudo/laravel-pt-br-localization --dev
           3 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan vendor:publish --tag=laravel-pt-br-localization
           4 - // Altere Linha 85 do arquivo config/app.php para:
               'locale' => 'pt_BR'
               // Para versões 11.x altere a linha 8 do arquivo .env
               APP_LOCALE=pt_BR
           5 - Efetuar os comandos abaixo:
               marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan config:clear
               marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail composer dump-autoload

016 -   Instalando uma versão específica do Node.js a partir do NVM direto do UBUNTU
        a) nvm install <number_version>. Exemplo: marcio@marcio72:~/projetosdocker/laravonze$ nvm install 20.16.0
        b) ver as versões do node, npm e nvm direto do UBUNTU. Exemplo: node -v; npm -v; nvm -v
        C) ver as versões do node e npm a partir da aplicação
           marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail node -v
           marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail npm -v

017 -   Incluir Bootstrap, CSS e JavaScript com Vite
        1) - Documentação do Vite: https://laravel.com/docs/11.x/vite#main-content
        2) - Seção: # Installing Node
        3) - Instalando as dependências Node(do frontEnd da aplicação atavés do NPM) com o comando abaixo:
             a) ./vendor/bin/sail npm install
             b) Obs: Será adicionado a pasta: node_modules
        4) - Acessar a página do Bootstrap Getting Started/Vite (menu lateral): https://getbootstrap.com/docs/5.3/getting-started/vite/
             a) comando para instalar o Framework Bootstrap (seção: Install Bootstrap)
                a.1) marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail npm i --save bootstrap @popperjs/core
             b) Será instalado o Framework Bootstrap na pasta node_modules, ou seja, será instalado a partir do NPM e não
                copiando os códigos fontes (css e js) diretamente nas pastas public/css e public/js
        5) - Apagar os trechos de cóigos do arquivo: resources/views/layouts/admin.blade.php, REFERENTE AO BOOTSTRAP
             a) <link href="{{ asset('css/bootstrap.min.css') }}" rel="stylesheet">
                <script src="{{ asset('js/bootstrap.bundle.min.js') }}"></script>
        6) - Para instalar o Bootstrap, dentro da pasta: resources/js
             a) no arquivo resources/js/bootstrap.js, acrescentar o trecho de código importando o FrameWok Bootstrap como abaixo:
                import 'bootstrap';
                import axios from 'axios';
                window.axios = axios;
                window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
             b) no arquivo resources/views/layouts/admin.blade.php incluir o trecho de código como abaixo:
                @vite(['resources/js/app.js'])
        7) - Para instar os demais arquivos css (styles_sbadmin.css, stylesmrc_admin.css e all.min.css) via Vite, faça o seguinte:
             a) Apagar/renomear caso deseje, os arquivos da pasta public/css
                bootstrap.min.css; bootstrap.mins.css.map
             b) Apagar/renomear caso deseje, os arquivos da pasta public/js
                bootstrap.bundle.min.js; bootstrap.bundle.min.js.map
             c) Mover para o diretório: resources/css, os arquivos:
                styles_sbadmin.css, stylesmrc_admin.css
             d) Importar os arquivos movidos no arquivo:resources/css/css.app, conforme trecho de cógido abaixo:
                /* Importar o css do Layout SB ADMIN*/
                @import 'styles_sbadmin.css';

                /* Importar o css personalizado do Layout*/
                @import 'stylesmrc_admin.css';
             e) no arquivo resources/views/layouts/admin.blade.php incluir o trecho de código como abaixo:
                @vite(['resources/css/app.css', 'resources/js/app.js'])
        8) - Mover o arquivo scripts_sbadmin.js da pasta public/js para a pasta resources/js e importá-lo no arquivo resource/js/app.js conforme abaixo:


        9) - No arquivo vite.config, certifica-se que os arquivos app.js e app.css estão incluidos conforme o trecho de código a seguir:
             export default defineConfig({
                plugins: [
                        laravel({
                        input: ['resources/css/app.css', 'resources/js/app.js'],
                        refresh: true,
                        }),
                ],
             });

        10) -   A partir de agora, para executar a aplicação, é necessário executar o comando:
                a) Para desenvolvimento: marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail npm run dev
                b) Para produção: marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail npm run build

        11) -   Incluindo os ÍCONES FONTAWESOME
                a) Apagar/renomear os arquivos css e js referente aos ícones fontawesome das pastas public/css e public/js
                b) Ir para a página Fontawesome: https://fontawesome.com/start
                c) Escolher "react" na seção: Use Font Awesome with Your Preferred Syntax or Stack…
                d) Execute o comando sugerido no passo da página apresentada para a instalação das forntes, como abaixo:
                   marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail npm i --save @fortawesome/fontawesome-free
                e) Acrescentar no arquivo resource/css/app.css o trecho de código a seguir:
                   /* Importar as fontes de ícones do FontAwesome*/
                   @import '@fortawesome/fontawesome-free/css/all.css';
                f) Apagar do arquivo resources/views/layouts/admin.blade.php o trecho que importa os arquivos referente ao css e js dos ícones
                   apagar o trecho abaixo:
                   <link href="{{ asset('css/all.min.css') }}" rel="stylesheet">
                   <script src="{{ asset('js/all.min.js') }}"></script>
                g) Apagar/renomear a pasta public/webfonts

        12) -   Ao baixar a aplicação do git, digitar os comandos abaixo:
                marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail npm install
                marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail npm run dev

018) -  Incluir SCRIPTS de terceiros e personalizados na aplicação
        1) Criar o arquivo resources/js/scriptsmrc_admin.js
        2) Importar o mesmo no arquivo resources/js/app.js conforme abaixo:
           import './scriptsmrc_admin';

019) -  Implementando o login
        1) Criar controller LoginController:
           ./vendor/bin/sail artisan make:controller LoginController
        2) Criar as rotas necessárias
           Route::get('/', [LoginController::class, 'index'])->name('login.index');
        3) Criar o layout para o login em layouts/login.blade.php (Criar a partir do layouts/admin.blade.php e fazer as modificações necessárias)
        4) Criar o formulário de login na view login/index.blade.php
        5) Criar a rota necessária para receber os dados do formulário
           Route::get('/login', [LoginController::class, 'loginProcess'])->name('login.process');
        6) Criar a request necessária:
           ./vendor/bin/sail artisan make:request LoginRequest
        7) Criar o método loginProcess no LoginController com o conteúdo abaixo:

           public function loginProcess(LoginRequest $request)
           {
                $request->validated();
                $authenticated = Auth::attempt(['email' => $request->email, 'password' => $request->password]);

                if(!$authenticated){
                    return back()->withInput()->with('error', 'E-mail ou senha inválido!');
                }

                return redirect()->route('dashboard.index')->with('success', 'Seja bem vindo!');
           }
        8) Criar a rota para deslogar o usuário logado
           Route::get('/logout', [LoginController::class, 'destroy'])->name('login.destroy');
        9) Criar o método destroy para deslogar o usuário que está logado

           public function destroy()
           {
                Auth::logout();

                return redirect()->route('login.index')->with('success', 'Deslogado com sucesso!');
           }
        10) Criar o middleware para criar rotas públicas e restritas
            Route::group(['middleware' => 'auth'], function(){
                ...
                // aqui, rotas que deva pertencer a este middleware
                ...
            });
        11) Redirecione o usuário para a página de login ('/') quando o mesmo não estiver autenticado e desejar acionar uma página restrita.
            modifique o método no arquivo: bootstrap/app.php, conforme abaixo:
            ...
            ->withMiddleware(function (Middleware $middleware) {
                $middleware->redirectGuestsTo('/');
            })
            ...
            Obs: Ness caso específico, a rota '/login' está representada apenas pela barra ('/') conforme podemos observar no arquivo de rota routes/web.php
                 ...
                 Route::get('/', [LoginController::class, 'index'])->name('login.index');
                 ...
                 Se a mesma possuisse o nome login, deveriamos colocar o nome dela no método acima (->withMiddleware(function (Middleware $middleware) {$middleware->redirectGuestsTo('/login');)

 020 -  Criar página para inscrever usuário no sitema
        1) Cria as rotas publiclas, ou seja, não restrita
           Route::get('/create-user-login', [UserController::class, 'create'])->name('login.create-user');
           Route::post('/store-user-login', [UserController::class, 'store'])->name('login.store-user');
        2) Implementar os respectivo métodos (create e store) no LonginController:
        3) Criar a respectiva view para apresentar o formulário de cadastrar novo usuário:
           ./vendor/bin/sail artisan make:view login/create


021 -   Configura o email recuperar senha com dados do MailTrap
        1) Crie os arquivos e pastas relacionado a personalização da recuperação de senhas via email com o comando abaixo.
           OBS: Será criada a pasta /resources/views/vendor com demais pastas e arquivos para personalização.
           ./vendor/bin/sail artisan vendor:publish --tag=laravel-mail
           Credenciais para envio de email no MailTrap
           MAIL_MAILER=smtp
           MAIL_HOST=sandbox.smtp.mailtrap.io
           MAIL_PORT=2525
           MAIL_USERNAME=c9b77ce14d9056
           MAIL_PASSWORD=e86b493c461e8d
           MAIL_ENCRYPTION=null
           MAIL_FROM_ADDRESS="atendimento@celkelaravel11.com.br"
           MAIL_FROM_NAME="${APP_NAME}"

021 -   SPATIE ROLE AND PERMISSIONS
        1) Site de referência:
           https://spatie.be/docs/laravel-permission/v6/introduction
        2) Comando para instalar:
           ./vendor/bin/sail composer require spatie/laravel-permission
        3) Criar/Publicar as migration com o comando abaixo:
           ./vendor/bin/sail artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
        4) Limpar o "cache da configuração"
           ./vendor/bin/sail artisan config:clea
        5) Executar as migrations
           ./vendor/bin/sail artisan migrate
        6) Adicionara TRAIT(HasRoles) no model User conforme abaixo:
           ...
           use Spatie\Permission\Traits\HasRoles;

           class User extends Authenticatable  implements Auditable
            {
                use \OwenIt\Auditing\Auditable;
                use HasFactory, Notifiable, HasRoles;
        7) Cadastrar PERMISSIONS (permissões)
           a) Criar a seeder PermissionSeeder
              ./vendor/bin/sail artisan make:seeder PermissionSeeder
           b) Arquio PermissionSeeder simplificado:

                namespace Database\Seeders;

                use Illuminate\Database\Console\Seeds\WithoutModelEvents;
                use Illuminate\Database\Seeder;
                use Spatie\Permission\Models\Permission;

                class PermissionSeeder extends Seeder
                {
                    public function run(): void
                    {
                        $permissions = [
                            // Permissões referente a Cursos
                            'index-course',
                            'show-course,',
                            'create-course',
                            'edit-course',
                            'destroy-course'
                        ];

                        // Percorre o array de permissões criado acima e verifica se no Model Permission ja existe a permissão cadastrada
                        foreach($permissions as $permission){
                            $existingPermission = Permission::where('name', $permission)->first();

                            // Se a permissão não existir, cadastra a permissão na tabela(permissions), fornecendo o nome e o tipo da aplicação (web ou api)
                            if(!$existingPermission){
                                Permission::create([
                                    'name' => $permission,
                                    'guard_name' => 'web',
                                ]);

                            }
                        }
                    }
                }
            c) Acrescentar a seeder PermissionSeeder ao arquivo DatabaseSeeder, conforme abaixo:
               ...
               $this->call([
                    CourseSeeder::class,
                    ClasseSeeder::class,
                    PermissionSeeder::class,
                    //UserSeeder::class,
                ]);
            d) Limpar a tabela com users (apagar todos os registros)

            e) Excutar a seeder
               ./vendor/bin/sail artisan db:seed
        8) Cadastrar as ROLES (papeis)
           a) Criar a seeder RoleSeeder
              ./vendor/bin/sail artisan make:seeder RoleSeeder
           b) Arquivo RoleSeeder simplificado
                namespace Database\Seeders;

                use Illuminate\Database\Console\Seeds\WithoutModelEvents;
                use Illuminate\Database\Seeder;
                use Spatie\Permission\Models\Role;

                class RoleSeeder extends Seeder
                {
                    public function run(): void
                    {
                        // Verifica se o papel está criado no banco, se não estiver, cadastra-o
                        if(!Role::where('name', 'Super Admin')->first()){
                            Role::create([
                                'name' => 'Super Admin'
                            ]);
                        }

                        // Verifica se o papel está criado no banco, se não estiver, cadastra-o
                        if(!Role::where('name', 'Admin')->first()){
                            Role::create([
                                'name' => 'Admin'
                            ]);
                        }
                    }
                }
           c) Acrescentar a seeder PermissionSeeder ao arquivo DatabaseSeeder, conforme abaixo:
               ...
               $this->call([
                    CourseSeeder::class,
                    ClasseSeeder::class,
                    PermissionSeeder::class,
                    RoleSeeder::class,
                    //UserSeeder::class,
                ]);
           e) Excutar a seeder
               ./vendor/bin/sail artisan db:seed
        9)  Sequência de comandos ao baixar do gitHub para uma máquina local
            a) ./vendor/bin/sail composer update
            b) ./vendor/bin/sail artisan migrate:fresh
            c) ./vendor/bin/sail artisan cache:clear
            d) ./vendor/bin/sail artisan db:seed
        10) Associando os usuários as suas devidas permissões
            a) No login(LoginController), deve-se recuperar as permissões que o usuário possui, conforme abaixo:

                ...
                // Depois de autenticado, deve-se obter o usuário autenticado
                $user = Auth::user();
                $user = User::find($user->id);

                // Verifica se o usuário possui o papel "Super Admin"
                if($user->hasRole('Super Admin')){
                    // Recupera no banco TODAS as permissões, apenas o nome(pluck) em forma de array(toArray)
                    $permissions = Permission::pluck('name')->toArray();
                }else{
                    // Recupera no banco SÓ SÓ as permissõoes que o papel do usuário possui. Apenas o nome em forma de array
                    // Obs: o usuário possui um papel, o papel possui permissões, portando obtém as permissões do usuári via papel
                    $permissions = $user->getPermissionsViaRoles()->pluck('name')->toArray();
                }

                // Ao usuário é atribuída só as permissões que o mesmo possui.
                // Obs: o método "syscPermissions", recebe um array. "$permissions" é um array(... toArray())
                $user->syncPermissions($permissions);
                ...
            b) No arquivo bootstrap/app.php, na método ->withMiddleware() acrescentar o trecho de código conforme abaixo:
                ...
                $middleware->alias([
                    'role' => \Spatie\Permission\Middleware\RoleMiddleware::class,
                    'permission' => \Spatie\Permission\Middleware\PermissionMiddleware::class,
                    'role_or_permission' => \Spatie\Permission\Middleware\RoleOrPermissionMiddleware::class,
                ]);
                ...
            c) Acrescentar nas rotas os middleware, conforme exemplo abaixo:
               Obs: ...->middleware('permission: create-course'); create-course é o nome que foi cadastrado no banco de dados na tabela permissions
                    ->middleware('permission: create-course'), não tem nada a ver com a rota criada(Route::get('/create-course',) é apenas uma coincidência
               Route::get('/create-course', [CourseController::class, 'create'])->name('course.create')->middleware('permission:create-course');

            d) Definindo as permissões do Super Administrador
               d.1) Acrescentar no arquivo: app/Providers/AppServiceProvider.php, no método boot o trecho de código abaixo:

                    public function boot(): void
                    {
                        // Incluir a paginação do Bootstrap 5
                        Paginator::useBootstrapFive();

                        // Super Admin tem acesso a todas as páginas
                        Gate::before(function ($user, $ability) {
                            return $user->hasRole('Super Admin') ? true : null;
                        });
                    }

            e) Ocultar elementos na view sem permissão de acesso
               @can()
                <elemento></elemento>
               @endcan

022 -   Alterndo a estrutura da tabela "permissions" adicionando a coluna "title" depois do campo "id"
        1) Criar a migration:
           ./vendor/bin/sail artisan make:migration alter_permissions_table_add_title_column
        2) Acrescentar no corpo da migration criada, o código abaixo:
           ...
           public function up(): void
            {
                Schema::table('permissions', function(Blueprint $table){
                    $table->string('title')->after('id');
                });
            }

            public function down(): void
            {
                Schema::table('permissions', function(Blueprint $table){
                    $table->dropColumn('title');
                });
            }
        3) Executar a migration criada
           ./vendor/bin/sail artisan migrate
        4) Alterar a PermissionSeed para refletir a coluna criada, como no exemplo abaixo:




























CMD01 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
CMD02 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:controller CourseController
CMD03 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:view courses/index
CMD04 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:model Course
CMD05 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:migration alter_courses_add_price_table
CMD06 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate:rollback
CMD07 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:request CourseRequest




OBS01 - Os arquivos CSS e JS quando colocados dentro das pasta "resources/css e resources/js" não são visualizados pelo
        usuário final, mas se colocados na pasta public/css ou public/js os mesmos serão.

Ir para o GitHub
Criar um novo projeto: laravonze
Realizar a sequencia de comandos abaixo na pasta do projeto
marcio@vaio:~/projetosdocker/laravonze$ git init
marcio@vaio:~/projetosdocker/laravonze$ git remote add origin https://github.com/marcio72vieira/laravonze.git
marcio@vaio:~/projetosdocker/laravonze$ git status
marcio@vaio:~/projetosdocker/laravonze$ git add .
marcio@vaio:~/projetosdocker/laravonze$ git commit -m "Inicio do projeto com Laravel 11"
marcio@vaio:~/projetosdocker/laravonze$ git push origin master
    user:
    password:

OBS03 - COnfigurações para acessar banco com MySQL WorkBranch
        1 - Connection Name: CelkeLaravel11
        2 - Hostname: 127.0.0.1
        3 - Port: 3307
        4 - User Name: sail
        5 - Store in Keichain...: password
        6 - Default Schema: laravonze
        7 - Clicar no botão: Test Connection

OBS04 - Quando utilizar FormsRequest Para VALIDAR, acrescentar no corpo dos métodos Store e Update o trecho de código a
        a seguir, senão por algum motivo dá erro:
        // Validar o formulário
        // $request->validate(); -> Só esta linha dá ERRO
        $validated = $request->validated(); -> Com esta o ERRO é eliminado.

OBS05 - Para levantar os mesmos containers, ao invés de digitar docker up -d (que irá criar novos containers) digite: docker start $(docker ps -a -q)

OBS06 - O nome do midlleware colocado no final de cada rota, deve ser o mesmo nome(name) cadastrado na tabela "permissions". Como no exemplo abaixo:
        Nada tem a ver com o nome da rota, muito embora, faça sentido colocar o nome(name) da permissão igual ao valor da rota.
        Rota:
        ...
        Route::get('/index-role-permission/{role}', [RolePermissionController::class, 'index'])->name('role-permission.index')->middleware('permission:index-role-permission');
        
        Nome cadastrado na tabela permissions (através da PermissionSeed)
        ...
        // Permissões referente a Permissões
            ['title' => 'Listar permissões', 'name' => 'index-role-permission'],



Site para cálculo do Imposto de relacinado
https://sicalc.receita.economia.gov.br/sicalc/principal


Desabilitando protreção por push de usuário:
https://docs.github.com/pt/code-security/secret-scanning/push-protection-for-users?utm_source=pocket_shared#disabling-push-protection-for-users
Desabilitar a proteção por push para usuários

É possível desabilitar a própria proteção por push para usuários nas configurações da sua conta pessoal.

    No canto superior direito de qualquer página do GitHub, clique sua foto de perfil e clique em Configurações.

    Na seção "Segurança" da barra lateral, clique em

Segurança de código e análise.

Em "Usuário", clique em Desabilitar à direita de "Proteção por push para si mesmo".











