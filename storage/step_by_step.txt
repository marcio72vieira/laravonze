000 -   Para baixar o projeto via GIT:
        a) Clonar o projeto: / OU baixar o arquivo .zip
            marcio@marcio72:~/projetosdocker/laravonze$ git clone https://github.com/marcio72vieira/laravonze.git
        b) Criar o arquivo ".env" a partir do arquivo ".env.example" conforme os passos abaixo:
            1 - Entrar a pasta do projeto
                cd projetosdocker/laravonze
                cp ./.env.example .env
            2 - Fazer as alterações necessárias conforme descrito abaixo:
                1) APP_TIMEZONE=America/Sao_Paulo
                2) APP_LOCALE=pt-BR
                3) APP_PORT=8080
                4) FORWARD_DB_PORT=3307
                5) DB_DATABASE=laravonze
        c) Atualizar o projeto com as dependências necessárias
            marcio@marcio72:~/projetosdocker/laravonze$ composer update
        d) Levantar os containeres
            ./vendor/bin/sail up -d
        e) Gerar a chave da aplicação
            marcio@vaio:~/projetosdocker/laravonze$  ./vendor/bin/sail artisan key:generate
        f) Depois de ter criado e modificado o arquivo .env aplicar o comando abaixo:
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail composer dump-autoload
        g) Executar as migrations:
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
        h) Executar a aplicação
            http://localhost:8080




001 -   Para criar o projeto:
        a) Dentro da pasta de projetosdocker digitar:
            curl -s https://laravel.build/laravonze | bash
        b) No arquivo docker-compose.yml alterar conforme código abaixo:
            b.1) - '${APP_PORT:-8080}:80'
            b.2) - '${FORWARD_DB_PORT:-3307}:3306'
            b.3) - '${FORWARD_REDIS_PORT:-6380}:6379'
        c) Acrescentar no arquivo .env as variáveis, conforme abaixo:
            c.1) APP_TIMEZONE=America/Sao_Paulo
            c.2) APP_LOCALE=pt-BR
            c.3) APP_PORT=8080
            c.4) FORWARD_DB_PORT=3307
            c.5) DB_DATABASE=laravonze
        d) Na pasta do projeto digitar:
            d.1) ./vendor/bin/sail up -d
            d.2) ./vendor/bin/sail artisan migrate


002 -   Para executar o projeto:
        Com os "containers" levantados (./vendor/bin/sail up -d), na barra de navegação, digitar:
        http://localhost:8080

003 -   Para gerar uma chave para aplicação quando necessário. Com os "containers" levantados, dentro da pasta do projeto:
        marcio@vaio:~/projetosdocker/laravonze$  ./vendor/bin/sail artisan key:generate

004 -   Para instalar ou atualizar as dependências da aplicação:
        marcio@vaio:~/projetosdocker/laravonze$  ./vendor/bin/sail composer install OU composer update

005 -   Para ver as versões do PHP, MySQL, Composer, NPM e Node instaladas, digitar:
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail php -v
        marcio@vaio:~/projetosdocker/laravonze$ mysql --version
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail composer
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail npm -v
        marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail node -v

006- -  Criando seed
        a) ./vendor/bin/sail artisan make:seeder CourseSeeder
        b) Modificar o método run, da seeder criada na linha acima:
                public function run(): void
                {
                        // Só cria um curso, se não existir um curso com o nome já cadastrado
                        if(!Course::where('name','Curso de Laravel - T1')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T1'
                        ]);
                        }

                        if(!Course::where('name','Curso de Laravel - T2')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T2'
                        ]);
                        }
                }
        c) Acrescentar no arquivo: database/seeders/DatabaseSeeder.php, o trecho de código conforme abaixo:
                $this->call([
                        CourseSeeder::class,
                ]);
        d) Execute a seed com o comando abaixo:
                ./vendor/bin/sail artisan db:seed

007 -   Adicionando uma coluna a uma tabela existente
        a) Digitar o comando relacinado à cricção da coluna(s) na tabela desejada
           marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:migration alter_courses_add_price_table
        b) Digitar no corpo do método criado pelo comando acima o trecho de código a seguir:
                public function up(): void
                {
                        Schema::table('courses', function(Blueprint $table){
                                $table->float('price')->after('name')->default(0);
                        });
                }

                /**
                * Reverse the migrations.
                */
                public function down(): void
                {
                        Schema::table('courses', function(Blueprint $table){
                                $table->dropColumn('price');
                        });
                }
        c) Executar o comando migrate
           marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
        d) Alterar a seed referente á coluna com o novo campo Adicionando
                // Só cria um curso, se não existir um curso com o nome já cadastrado
                if(!Course::where('name','Curso de Laravel - T1')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T1',
                                'price' => 197.43
                        ]);
                }

                if(!Course::where('name','Curso de Laravel - T2')->first()){
                        Course::create([
                                'name' => 'Curso de Laravel - T2',
                                'price' => 247.43
                        ]);
                }

008 -   Criando componente ANÔNIMO, ou seja, apenas com blade(view) sem uma class(controller) .
        a) Criar o componente confome comando abaixo: Será criado o arquivo: resources/views/components/alert.blade.php
                ./vendor/bin/sail artisan make:component alerts --view

        b) Copiar para o conteúdo do arquivo alert.blade.php os trechos de código abaixo, referente ás mensagem de alerts desejadas, conforme abaixo:
                {{-- Mensagens de sucesso --}}
                @if (session('success'))
                        <p style="background-color: green; color: white">
                                {{ session('success') }}
                        </p>
                @endif

                {{-- Mensagens de error --}}
                @if (session('error'))
                        <p style="background-color: red; color: white">
                                {{ session('error') }}
                        </p>
                @endif


                {{-- Mensagens de errors de validação --}}
                @if ($errors->any())
                        <span style="background-color: red; color: white">
                                @foreach ($errors->all() as $error)
                                {{ $error }}<br>
                                @endforeach
                        </span>
                @endif
        c) Acrescentar nas view index.blade; create.blade e edit.blade a tag abaixo:
                <x-alert>

009 -   Bengin, Commit e RollBack Transaction
        1 - Importar a classe correspondente
            use Illuminate\Support\Facades\DB;

        2 - Estrutura básica:

            Validar dados
            // Iniciar transação antes do try/catch
            DB::beginTransaction()
            try{
                    // Tentar SALVAR / ATUALIZAR / DELETAR os dados
                    // Em caso de sucesso
                    DB::commit()
                    ... mais alguma coisa (redirect etc...)
            } catch(Exception $e) {
                    // Em caso de falha na tentativa de SALVAR / ATUALIZAR / DELETAR os dados
                    DB::rollBacl()
                    ... mais alguma coisa (redirect etc...)
            }

010 -   Trabalhando com Logs
        Arquivo de configuração: /home/marcio/projetosdocker/laravonze/config/logging.php
        Especificação:
                single (único arquivo);
                daily (um arquivo para cada dia. Mais recomendado)
                info(fluxo normal do sistema)
        Alterar preferencialmente no arquivo .env
                LOG_CHANNEL=stack
                LOG_STACK=daily
                LOG_DAILY_DAYS=15
                LOG_DEPRECATIONS_CHANNEL=null
                LOG_LEVEL=debug
        Como o arquivo .env foi alterado, digitar o comando:
                marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail composer dump-autoload

011 -   Auditoria: Site oficial:
        a) Site oficial da dependência:
            https://laravel-auditing.com/guide/installation.html
        b) Instalar o pacote de auditoria do Laravel
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail composer require owen-it/laravel-auditing
        c) Publicar o pacote
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan vendor:publish --provider "OwenIt\Auditing\AuditingServiceProvider" --tag="config"
        d) Publicar as migrations da base de dados
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan vendor:publish --provider "OwenIt\Auditing\AuditingServiceProvider" --tag="migrations"
        e) Execuar a migration criada pela publicação da base de dados anterior
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
        f) Acrescentar as Models Course e Classe, o trecho de código conforme abaixo:
            ...
            use OwenIt\Auditing\Contracts\Auditable;

            class Course extends Model implements Auditable
            {
                use \OwenIt\Auditing\Auditable;
                use HasFactory;
            ...
        g) Limpar o cache de informações caso seja necessário
            marcio@marcio72:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan config:clear
        h) Depois de baixar o projeto via git para atualização Casa/Trabalho Trabalho/Casa, digitar:
            1) marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail composer update
            2) marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
            3) marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan config:clear


            


012 -   Integrando o Bootstrap no projeto
        1 - Abrir o site em: https://getbootstrap.com/
        2 - Na parte da documentação "Docs", acessar:
            VIA CDN
            a) Introduction > Quick start > 2. Include Bootstrap’s CSS and JS. > Copiar os links abaixo e colar no arquivo: resources/views/layouts/admin.blade.php, conforme abaixo, via cdn
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <meta http-equiv="X-UA-Compatible" content="ie=edge">
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
                    <title>Celke</title>
                </head>
                <body>

                    @yield('content')
                    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

                </body>
                </html>
        3 - Na parte de documentação "Docs", acessar:
            VIA DOWNLOAD
            a) Compiled CSS and JS > Download (baixar o arquivo) > Descompactar os arquivos
            b) Criar a pasta public/css e copiar os arquivos abaixo, para esta pasta:
                bootstrap.min.css
                bootstrap.min.css.map
            b) Criar a pasta public/js e copiar os arquivos abaixo, para esta pasta:
                bootstrap.bundle.min.js
                bootstrap.bundle.min.js.map
            d) Alterar o arquivo: resources/views/layouts/admin.blade.php,, conforme abaixo:
                <!DOCTYPE html>
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <meta http-equiv="X-UA-Compatible" content="ie=edge">
                    <link href="{{ asset('css/bootstrap.min.css') }}" rel="stylesheet">

                    <title>Celke</title>
                </head>
                <body>

                    @yield('content')

                    <script src="{{ asset('js/bootstrap.bundle.min.js') }}"></script>


                </body>
                </html>























CMD01 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate
CMD02 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:controller CourseController
CMD03 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:view courses/index
CMD04 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:model Course
CMD05 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:migration alter_courses_add_price_table
CMD06 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan migrate:rollback
CMD07 - marcio@vaio:~/projetosdocker/laravonze$ ./vendor/bin/sail artisan make:request CourseRequest




OBS01 - Os arquivos CSS e JS quando colocados dentro das pasta "resources/css e resources/js" não são visualizados pelo
        usuário final, mas se colocados na pasta public/css ou public/js os mesmos serão.

Ir para o GitHub
Criar um novo projeto: laravonze
Realizar a sequencia de comandos abaixo na pasta do projeto
marcio@vaio:~/projetosdocker/laravonze$ git init
marcio@vaio:~/projetosdocker/laravonze$ git remote add origin https://github.com/marcio72vieira/laravonze.git
marcio@vaio:~/projetosdocker/laravonze$ git status
marcio@vaio:~/projetosdocker/laravonze$ git add .
marcio@vaio:~/projetosdocker/laravonze$ git commit -m "Inicio do projeto com Laravel 11"
marcio@vaio:~/projetosdocker/laravonze$ git push origin master
    user:
    password:

OBS03 - COnfigurações para acessar banco com MySQL WorkBranch
        1 - Connection Name: CelkeLaravel11
        2 - Hostname: 127.0.0.1
        3 - Port: 3307
        4 - User Name: sail
        5 - Store in Keichain...: password
        6 - Default Schema: laravonze
        7 - Clicar no botão: Test Connection

OBS04 - Quando utilizar FormsRequest Para VALIDAR, acrescentar no corpo dos métodos Store e Update o trecho de código a
        a seguir, senão por algum motivo dá erro:
        // Validar o formulário
        // $request->validate(); -> Só esta linha dá ERRO
        $validated = $request->validated(); -> Com esta o ERRO é eliminado.

OBS05 - Para levantar os mesmos containers, ao invés de digitar docker up -d (que irá criar novos containers) digite: docker start $(docker ps -a -q)


token
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

Site para cálculo do Imposto de relacinado
https://sicalc.receita.economia.gov.br/sicalc/principal









